{"version":3,"sources":["utils/_utils-classes.scss","utils/_utils-mixins.scss","utils/_grid.scss","utils/_breakpoints.scss","utils/_vars.scss","utils/_fonts.scss","base/_base.scss","../../styleguide/01_components/icon/_icon.scss","../../styleguide/01_components/image/_image.scss","../../styleguide/02_modules/backtotop/_backtotop.scss","utils/_functions.scss"],"names":[],"mappings":"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","file":"app.css","sourcesContent":["// Misc. helper classes\n// to use in HTML markup\n\n\n\n.u-padded {\n  > span {\n    background-color: var(--background, transparent);\n    box-decoration-break: clone;\n    display: inline;\n    padding: .1em .2em;\n  }\n\n}\n\n\n\n\n\n\n\n\n\n// Responsive image\n//\n// (max-width and width: 100%)\n.u-img-responsive {\n  @include u-img-responsive;\n}\n\n\n// Centered images with defined width\n// on HTML image tag\n.u-img-center {\n  img {\n    display: block;\n    margin: 0 auto;\n  }\n}\n\n// Full width image\n.u-img--fullwidth {\n  display: block;\n  max-width: 100%;\n  width: 100%;\n}\n\n\n// Centered contents\n.u-center,\n.u-text--center {\n  text-align: center !important;\n}\n\n\n\n\n// Removing text-transforms from fonts\n.u-text--normal {\n  text-transform: none;\n}\n\n.u-text--right {\n  text-align: right !important;\n}\n\n\n// Adding uppercase to fonts\n.u-text--uppercase {\n  text-transform: uppercase;\n}\n\n\n\n\n// Line-through\n.u-linethrough {\n  text-decoration: line-through;\n}\n\n\n\n\n// Resetting display font from font\n// for footnotes (*) etc.\n.u-footnote {\n  font-family: font(base, 'body');\n}\n\n\n\n\n// Disabling pointer-events from maps\n.u-maps {\n  width: 100%;\n\n  &.scrolloff {\n    pointer-events: none;\n  }\n}\n\n\n\n\n// Adding global transition to element\n.u-transition {\n  transition: var(--transition-default);\n}\n\n\n\n// Element is hidden\n.u-hidden {\n  display: none;\n}\n","// Utility mixins\n\n\n\n\n\n// Using margins and paddings based on $baseline\n// to ensure vertical and horizontal grid\n@mixin u-baseline($size: 1, $type: margin) {\n  $baseline: #{$baseline * ($size / 16)}rem;\n\n  #{$type}: $baseline;\n}\n\n\n\n\n\n// helper to calculate line-height based\n// on baseline grid\n//\n// IMPORTANT: only used in _fonts.scss\n// DO NOT USE this mixins in your CSS!\n// USE font() instead.\n@mixin u-font-baseline($size, $lineheight) {\n  font-size: rem-calc($size);\n  line-height: $lineheight / $size;\n}\n\n\n\n\n\n\n\n\n\n\n// Helper to pull image outside of GRID\n@mixin u-img-pull($value) {\n  margin-left: -($value);\n  margin-right: -($value);\n  width: calc(100% + #{$value * 2});\n  max-width: calc(100% + #{$value * 2});\n}\n\n\n\n\n\n\n\n\n\n// helper for preview images\n// @source: http://andyshora.com/css-image-container-padding-hack.html\n@mixin u-img-preview($view: square) {\n  background-color: palette(ui, 'alto');\n  display: block;\n  position: relative;\n  overflow: hidden;\n\n  img {\n    @include u-img-responsive;\n\n    &.thumb {\n      // display: none;\n      filter: blur(20px);\n      top: 0;\n      right: 0;\n      bottom: 0;\n      left: 0;\n      width: 100%;\n      position: absolute;\n      z-index: 0;\n    }\n\n    &.original {\n      position: absolute;\n      top: 0;\n      left: 0;\n    }\n  }\n}\n\n\n\n\n\n// Text link with borders\n//\n//\n@mixin u-link-border($type: null) {\n  // Show border on hover\n  @if $type == hover {\n    border-bottom: rem-calc(2) solid transparent;\n\n    @include breakpoint(large) {\n      border-width: rem-calc(3);\n    }\n\n    &:hover,\n    &:active {\n      border-color: palette(brand, 'yuma');\n    }\n\n  // Show border permanently\n  } @else if $type == static {\n    border-bottom: rem-calc(2) solid palette(brand, 'yuma');\n    font-weight: bold;\n\n    @include breakpoint(large) {\n      border-width: rem-calc(3);\n    }\n\n  // Show border initially with hover\n  } @else if $type == active {\n    border-bottom: rem-calc(3) solid palette(brand, 'yuma');\n\n    @include breakpoint(large) {\n      border-width: rem-calc(3);\n    }\n\n    &:hover,\n    &:active {\n      border-color: transparent;\n    }\n\n  // Default underline\n  } @else {\n    font-weight: bold;\n    text-decoration: underline;\n\n    &:hover,\n    &:active {\n      text-decoration-color: palette(brand, 'yuma');\n    }\n  }\n}\n\n\n\n// Icon as link\n@mixin u-icon-link() {\n  .c-icon {\n    transition: $global-transition;\n    transform-origin: 50% 100%;\n  }\n\n  a:hover {\n    .c-icon {\n      transform: scale(1.1);\n    }\n  }\n}\n\n\n\n\n\n\n\n// Links for content mixin\n@mixin u-content-links() {\n  a:not(img) {\n    @include u-link-border;\n  }\n}\n\n\n\n\n\n// List formatting\n@mixin u-list($type: ol) {\n  $breakpoint: large;\n  $offset: rem-calc($baseline * 3.5);\n  $color: palette(brand, 'yuma');\n\n  @include u-baseline(3, margin-bottom);\n\n  @include breakpoint($breakpoint) {\n    @include u-baseline(4, margin-bottom);\n  }\n\n  > li {\n    @include u-baseline(1, margin-bottom);\n    list-style-type: none;\n    position: relative;\n\n    @include breakpoint($breakpoint) {\n      @include u-baseline(2, margin-bottom);\n    }\n\n    &:after {\n      position: absolute;\n      left: -($offset);\n    }\n\n    @if $type == ol {\n      counter-increment: list; // create counter type\n\n      &:after {\n        @include font($font-options-m-secondary);\n        font-weight: bold;\n        font-style: italic;\n        color: $color;\n        content: counter(list) '.';\n        position: absolute;\n        left: -($offset * 1.5);\n        text-align: right;\n        top: 0;\n        width: rem-calc(30);\n\n        @include breakpoint($breakpoint) {\n          @include font($font-options-xl-secondary);\n        }\n      }\n    }\n\n    @if $type == ul {\n      &:after {\n        @include u-baseline(1.5, top);\n        background: $color;\n        content: '';\n        width: .5rem;\n        height: .5rem;\n        display: inline-block;\n\n        @include breakpoint($breakpoint) {\n\n        }\n      }\n    }\n  }\n}\n\n\n\n\n// Content formatting\n//\n//\n@mixin u-content-formatting() {\n  @include u-content-links;\n\n  @include font($font-base-s);\n\n  @include breakpoint(medium) {\n    @include font($font-base-l);\n  }\n\n  @include breakpoint(large) {\n    @include font($font-base-ll);\n  }\n\n  a {\n    @include u-content-links;\n  }\n\n  > p {\n    @include u-baseline(3, margin-bottom);\n    margin-top: 0;\n    word-break: break-word;\n\n    @include breakpoint(large) {\n      @include u-baseline(4, margin-bottom);\n      margin-top: 0;\n    }\n  }\n\n  h2,\n  h3,\n  h4 {\n    @include font($font-base-l-narrow);\n    margin-top: 0;\n\n    @include breakpoint(large) {\n      @include font($font-base-ll);\n    }\n\n    &:not(:first-of-type) {\n      margin-top: 0;\n    }\n  }\n\n  ul {\n    @include u-list(ul);\n    @include u-baseline(8, padding-left);\n  }\n\n  ol {\n    @include u-list(ol);\n    @include u-baseline(8, padding-left);\n  }\n}\n\n@mixin u-content-formatting-fonts() {\n  @include font-replace(copy);\n\n  h2,\n  h3,\n  h4 {\n    @include font-replace(display);\n  }\n}\n\n\n\n\n// Placeholder styles\n@mixin u-input-placeholder() {\n  font-weight: normal;\n  font-style: italic;\n}\n\n\n\n\n\n\n\n\n\n// helper for smooth transitioned\n// visibility toggles\n@mixin u-toggle-visibility($mode: 'hide', $zindex: 1) {\n  @if $mode == 'hide' {\n    opacity: 0;\n    visibility: hidden;\n    z-index: -1;\n  }\n\n  @if $mode == 'show' {\n    opacity: 1;\n    visibility: visible;\n    z-index: $zindex;\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n// setting images to responsive width\n// and fluid behaviour\n@mixin u-img-responsive() {\n  display: block;\n  max-width: 100%;\n  max-height: 100%;\n  height: auto;\n  width: 100%;\n}\n\n\n\n\n\n\n\n\n// removing list styles and box\n@mixin u-list-reset() {\n  list-style: none;\n  margin-left: 0;\n  padding-left: 0;\n}\n\n\n\n\n\n\n\n\n// adding ellipsis to element\n//\n// @param {Number} $max-width – required|fallback\n@mixin u-ellipsis($max-width: 200) {\n  max-width: rem-calc($max-width);\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Product image hover\n@mixin u-img-hover() {\n  img {\n    transition: $global-transition;\n  }\n\n  &:hover,\n  &:active {\n    img {\n      filter: brightness(110%);\n    }\n  }\n}\n\n\n\n\n\n\n\n\n\n// a11y-friendly hidden elements\n@mixin u-a11y-hidden() {\n  position: absolute;\n  width: rem-calc(1);\n  height: rem-calc(1);\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  clip-path: inset(50%);\n}\n\n\n@mixin u-a11y-visible() {\n  clip: auto;\n  width: auto;\n  height: auto;\n  overflow: auto;\n}\n\n\n\n\n\n//\n// macOS dark mode styles\n//\n@mixin u-media-dark() {\n  @media (prefers-color-scheme: dark) {\n    @content;\n  }\n}\n\n\n\n\n\n// Vendor prefixed keyframes\n@mixin keyframes($animationName) {\n  @-webkit-keyframes #{$animationName} {\n    @content;\n  }\n\n  @-moz-keyframes #{$animationName} {\n    @content;\n  }\n\n  @-o-keyframes #{$animationName} {\n    @content;\n  }\n\n  @keyframes #{$animationName} {\n    @content;\n  }\n}\n","// Grid\n//\n// @var {String} --grid-max (Grid max width in px)\n// @var {String} --grid-gap-[small|medium|large|xlarge] (Gap between the columns in px)\n// @var {Number} --grid-rows (Amount of grid rows)\n// @var {Number} --grid-cols (Amount of grid cols)\n// @var {String} --grid-align [stretch|center|start|end] (Align of all items inside grid))\n// @var {String} --grid-height (Custom grid height)\n// @var {Number} --grid-row-start\n// @var {Number} --grid-row-start-[small|medium|large|xlarge]\n// @var {Number} --grid-row-end\n// @var {Number} --grid-row-end-[small|medium|large|xlarge]\n// @var {Number} --grid-col-start\n// @var {Number} --grid-col-start-[small|medium|large|xlarge]\n// @var {Number} --grid-col-end\n// @var {Number} --grid-col-end-[small|medium|large|xlarge]\n// @var {Number} --grid-col-zindex\n\n$grid-max-width: 1240px !default;\n$grid-gap: (\n    small: 16px,\n    medium: 24px,\n    large: 40px,\n    xlarge: 40px\n) !default;\n\n.grid {\n    --grid-gap-default: #{rem-calc(map-get($grid-gap, 'small'))};\n    --grid-gap-medium: #{rem-calc(map-get($grid-gap, 'medium'))};\n    --grid-gap-large: #{rem-calc(map-get($grid-gap, 'large'))};\n    --grid-gap-xlarge: #{rem-calc(map-get($grid-gap, 'xlarge'))};\n    --grid-gap: var(--grid-gap-small, var(--grid-gap-default));\n    --grid-col-width: calc(calc(var(--grid-max, #{rem-calc($grid-max-width)}) - calc(var(--grid-cols, 12) * var(--grid-gap, var(--grid-gap-default)))) / var(--grid-cols, 12));\n\n    align-items: var(--grid-align, start);\n    display: grid;\n    grid-template-rows: repeat(var(--grid-rows, 1), var(--grid-height));\n    grid-template-columns:  [start]\n                                minmax(var(--grid-gap, 0), 1fr)\n                            [grid-start]\n                                repeat(var(--grid-cols, 12),\n                                minmax(0, var(--grid-col-width)))\n                            [grid-end]\n                                minmax(var(--grid-gap, 0), 1fr)\n                            [end];\n    gap: var(--grid-gap);\n\n    @include breakpoint(medium) {\n        --grid-gap: var(--grid-gap-medium, var(--grid-gap-small, var(--grid-gap-default)));\n    }\n\n    @include breakpoint(large) {\n        --grid-gap: var(--grid-gap-large, var(--grid-gap-medium, var(--grid-gap-small, var(--grid-gap-default))));\n    }\n\n    @include breakpoint(xlarge) {\n        --grid-gap: var(--grid-gap-xlarge, var(--grid-gap-large, var(--grid-gap-medium, var(--grid-gap-small, var(--grid-gap-default)))));\n    }\n}\n\n.grid__col {\n    --grid-col-start-default: grid-start;\n    --grid-col-end-default: grid-end;\n    --grid-col-start: var(--grid-col-start-small, var(--grid-col-start-default));\n    --grid-col-end: var(--grid-col-end-small, var(--grid-col-end-default));\n    --grid-row-start-default: 1;\n    --grid-row-end-default: auto;\n    --grid-row-start: var(--grid-row-start-small, var(--grid-row-start-default));\n    --grid-row-end: var(--grid-row-end-small, var(--grid-row-end-default));\n\n    align-self: var(--grid-align-self, stretch);\n    grid-row: var(--grid-row-start)/var(--grid-row-end);\n    grid-column: var(--grid-col-start)/var(--grid-col-end);\n    position: relative;\n    z-index: var(--grid-col-zindex);\n\n    @include breakpoint(medium) {\n        --grid-col-start: var(--grid-col-start-medium, var(--grid-col-start-small, var(--grid-col-start-default)));\n        --grid-col-end: var(--grid-col-end-medium, var(--grid-col-end-small, var(--grid-col-end-default)));\n        --grid-row-start: var(--grid-row-start-medium, var(--grid-row-start-small, var(--grid-row-start-default)));\n        --grid-row-end: var(--grid-row-end-medium, var(--grid-row-end-small, var(--grid-row-end-default)));\n    }\n\n    @include breakpoint(large) {\n        --grid-col-start: var(--grid-col-start-large, var(--grid-col-start-medium, var(--grid-col-start-small, var(--grid-col-start-default))));\n        --grid-col-end: var(--grid-col-end-large, var(--grid-col-end-medium, var(--grid-col-end-small, var(--grid-col-end-default))));\n        --grid-row-start: var(--grid-row-start-large, var(--grid-row-start-medium, var(--grid-row-start-small, var(--grid-row-start-default))));\n        --grid-row-end: var(--grid-row-end-large, var(--grid-row-end-medium, var(--grid-row-end-small, var(--grid-row-end-default))));\n    }\n\n    @include breakpoint(xlarge) {\n        --grid-col-start: var(--grid-col-start-xlarge, var(--grid-col-start-large, var(--grid-col-start-medium, var(--grid-col-start-small, var(--grid-col-start-default)))));\n        --grid-col-end: var(--grid-col-end-xlarge, var(--grid-col-end-large, var(--grid-col-end-medium, var(--grid-col-end-small, var(--grid-col-end-default)))));\n        --grid-row-start: var(--grid-row-start-xlarge, var(--grid-row-start-large, var(--grid-row-start-medium, var(--grid-row-start-small, var(--grid-row-start-default)))));\n        --grid-row-end: var(--grid-row-end-xlarge, var(--grid-row-end-large, var(--grid-row-end-medium, var(--grid-row-end-small, var(--grid-row-end-default)))));\n    }\n}\n","// Breakpoint mixins\n\n$breakpoints: (\n  small: rem-calc(0),\n  medium: rem-calc(572),\n  large: rem-calc(768),\n  xlarge: rem-calc(992),\n  xxlarge: rem-calc(1200),\n) !default;\n\n@mixin breakpoint($val: small) {\n    // Size or keyword\n  $bp: nth($val, 1);\n  // Value for max-width media queries\n  $bpMax: 0;\n  // Direction of media query (up, down, or only)\n  $dir: if(length($val) > 1, nth($val, 2), up);\n  // Eventual output\n  $str: 'only screen';\n  // Is it a named media query?\n  $named: false;\n\n  // Orientation media queries have a unique syntax\n  @if $bp == 'landscape' or $bp == 'portrait' {\n    $str: $str + ' and (orientation: #{$bp})';\n  }\n\n  @else {\n    // Try to pull a named breakpoint out of the $breakpoints map\n    @if type-of($bp) == 'string' {\n      @if map-has-key($breakpoints, $bp) {\n        @if $dir == 'only' {\n          $next-bp: map-next($breakpoints, $bp);\n          @if $next-bp == null {\n            $bpMax: null;\n          }\n          @else {\n            $bpMax: $next-bp - (1/16);\n          }\n        }\n        $bp: map-get($breakpoints, $bp);\n        $named: true;\n      }\n      @else {\n        $bp: 0;\n      }\n    }\n\n    // Pixel and unitless values are converted to rems\n    @if unit($bp) == 'px' or unit($bp) == '' {\n      $bp: rem-calc($bp);\n    }\n    // Finally, the rem value is turned into an em value\n    $bp: strip-unit($bp) * 1em;\n\n    // Skip media query creation if the input is \"0 up\" or \"0 down\"\n    @if $bp > 0 or $dir == 'only' {\n      // And lo, a media query was born\n      @if $dir == 'only' {\n        @if $named == true {\n          $str: $str + ' and (min-width: #{$bp})';\n          @if $bpMax != null {\n            $str: $str + ' and (max-width: #{$bpMax})';\n          }\n        }\n        @else {\n          @debug 'ERROR: Only named media queries can have an \"only\" range.';\n        }\n      }\n      @else if $dir == 'down' {\n        $max: $bp - (1/16);\n        $str: $str + ' and (max-width: #{$max})';\n      }\n      @else {\n        $str: $str + ' and (min-width: #{$bp})';\n      }\n    }\n  }\n\n  // Output\n  @if $bp == 0em and $dir != 'only' {\n    @content;\n  }\n  @else {\n    @media #{$str} {\n      @content;\n    }\n  }\n}\n","// Calculate font metrics by baseline\n@function font-css-var($size: 16, $line: 24) {\n  $font-size: rem-calc($size);\n  $line-height: ($line / $size);\n\n  @return '#{$font-size}/#{$line-height}';\n}\n\n:root {\n  --color-bg-canvas: var(--user-color-bg-canvas, #fff);\n  --color-text-primary: var(--user-color-text-primary, #000);\n  --color-text-secondary: var(--user-color-text-secondary, #d8d8d8);\n  --color-primary: var(--user-color-primary, #00baf2);\n  --color-secondary: var(--user-color-secondary, #f7f7f7);\n  --color-black: #000;\n  --color-white: #fff;\n  --color-alabaster: #fbfbfb;\n  --color-sand: #f5f5f5;\n  --color-alto: #d0d0d0;\n  --color-chalice: #adadad;\n  --color-boulder: #767676;\n  --color-tundora: #3a3b3a;\n\n  --font-primary: var(--user-font-primary, 'Fira Sans', sans-serif);\n  --font-weight-light: 100;\n  --font-weight-regular: 200;\n  --font-weight-bold: 400;\n  --font-heading-primary: var(--font-weight-bold) clamp(#{rem-calc(28)}, 7.5vw, #{rem-calc(180)})/1.26 var(--font-primary);\n  --font-meta: 900 clamp(#{rem-calc(18)}, 5vw, #{rem-calc(56)})/1.26 var(--font-primary);\n\n  --padded-padding: .1em .2em;\n\n  --shadow-light: 0 1px 1px rgba(0,0,0,.03),0 2px 2px rgba(0,0,0,.03),0 4px 4px rgba(0,0,0,.03),0 8px 8px rgba(0,0,0,.03),0 16px 16px rgba(0,0,0,.03);\n  --shadow-medium: 0 1px 1px rgba(0,0,0,.06),0 2px 2px rgba(0,0,0,.06),0 4px 4px rgba(0,0,0,.06),0 8px 8px rgba(0,0,0,.06),0 16px 16px rgba(0,0,0,.06);\n  --shadow-heavy: 0 1px 1px rgba(0,0,0,.12),0 2px 2px rgba(0,0,0,.12),0 4px 4px rgba(0,0,0,.12),0 8px 8px rgba(0,0,0,.12),0 16px 16px rgba(0,0,0,.12);\n  --shadow-inset: inset 0 1px 3px rgba(0,0,0,.39),0 -1px 1px var(--color-light),0 1px 0 var(--color-light);\n  --shadow-popup: 0 2px 9px rgba(0,0,0,.1),0 3px 3px rgba(0,0,0,.025);\n\n  --transition-default: all .05s ease-in-out;\n  --transition-smooth: all .25s ease-in-out;\n}\n\n\n// @media (prefers-color-scheme: dark) {\n//     :root {\n//         --user-color-bg-canvas: #000;\n//         --user-color-text-primary: #fff;\n//         --user-color-text-secondary: #808080;\n//         --user-color-accent: rgb(37, 128, 189);\n//     }\n// }\n","/// Web fonts\n$fonts-path: '/assets/fonts';\n\n/* fira-sans-100 - latin */\n@font-face {\n  font-family: 'Fira Sans';\n  font-style: normal;\n  font-weight: 100;\n  src: local(''),\n       url('#{$fonts-path}/fira-sans-v10-latin-100.woff2') format('woff2'), /* Chrome 26+, Opera 23+, Firefox 39+ */\n       url('#{$fonts-path}/fira-sans-v10-latin-100.woff') format('woff'); /* Chrome 6+, Firefox 3.6+, IE 9+, Safari 5.1+ */\n  font-display: optional;\n}\n\n/* fira-sans-100italic - latin */\n@font-face {\n  font-family: 'Fira Sans';\n  font-style: italic;\n  font-weight: 100;\n  src: local(''),\n       url('#{$fonts-path}/fira-sans-v10-latin-100italic.woff2') format('woff2'), /* Chrome 26+, Opera 23+, Firefox 39+ */\n       url('#{$fonts-path}/fira-sans-v10-latin-100italic.woff') format('woff'); /* Chrome 6+, Firefox 3.6+, IE 9+, Safari 5.1+ */\n  font-display: optional;\n}\n\n/* fira-sans-200 - latin */\n@font-face {\n  font-family: 'Fira Sans';\n  font-style: normal;\n  font-weight: 200;\n  src: local(''),\n       url('#{$fonts-path}/fira-sans-v10-latin-200.woff2') format('woff2'), /* Chrome 26+, Opera 23+, Firefox 39+ */\n       url('#{$fonts-path}/fira-sans-v10-latin-200.woff') format('woff'); /* Chrome 6+, Firefox 3.6+, IE 9+, Safari 5.1+ */\n  font-display: optional;\n}\n\n/* fira-sans-200italic - latin */\n@font-face {\n  font-family: 'Fira Sans';\n  font-style: italic;\n  font-weight: 200;\n  src: local(''),\n       url('#{$fonts-path}/fira-sans-v10-latin-200italic.woff2') format('woff2'), /* Chrome 26+, Opera 23+, Firefox 39+ */\n       url('#{$fonts-path}/fira-sans-v10-latin-200italic.woff') format('woff'); /* Chrome 6+, Firefox 3.6+, IE 9+, Safari 5.1+ */\n  font-display: optional;\n}\n\n/* fira-sans-regular - latin */\n@font-face {\n  font-family: 'Fira Sans';\n  font-style: normal;\n  font-weight: 400;\n  src: local(''),\n       url('#{$fonts-path}/fira-sans-v10-latin-regular.woff2') format('woff2'), /* Chrome 26+, Opera 23+, Firefox 39+ */\n       url('#{$fonts-path}/fira-sans-v10-latin-regular.woff') format('woff'); /* Chrome 6+, Firefox 3.6+, IE 9+, Safari 5.1+ */\n  font-display: optional;\n}\n\n/* fira-sans-italic - latin */\n@font-face {\n  font-family: 'Fira Sans';\n  font-style: italic;\n  font-weight: 400;\n  src: local(''),\n       url('#{$fonts-path}/fira-sans-v10-latin-italic.woff2') format('woff2'), /* Chrome 26+, Opera 23+, Firefox 39+ */\n       url('#{$fonts-path}/fira-sans-v10-latin-italic.woff') format('woff'); /* Chrome 6+, Firefox 3.6+, IE 9+, Safari 5.1+ */\n  font-display: optional;\n}\n","// Global base styles\n//\n//\n//\n\n/** **************\n * Basic styles\n */\n html {\n  box-sizing: border-box;\n  height: 100%;\n}\n\n*,\n*:before,\n*:after {\n  box-sizing: inherit;\n}\n\nbody {\n  background-color: var(--color-bg-canvas);\n  color: var(--color-text-primary);\n  font-family: var(--font-primary);\n  font-size: 100%;\n  line-height: 1.5;\n  margin: 0;\n  overflow-x: hidden;\n  padding: 0;\n  text-align: center; // tmp\n  -webkit-text-size-adjust: none;\n  -webkit-font-smoothing: antialiased;\n  width: 100%;\n\n  // &.overflow-hidden {\n  //   overflow: scroll;\n  //   overflow-x: hidden;\n  //   overflow-y: auto;\n  // }\n\n  h1 {\n    font: var(--font-heading-primary);\n  }\n}\n\n\n\n\n\n/** ***********\n * Text selection\n */\n// ::-moz-selection {\n//   background: palette(brand, 'yuma');\n//   color: palette(ui, 'black');\n//   text-shadow: none;\n// }\n\n// ::selection {\n//   background: palette(brand, 'yuma');\n//   color: palette(ui, 'black');\n//   text-shadow: none;\n// }\n\n\n\n\n\n\n/** ***********\n * Palceholder styles\n */\n// ::-webkit-input-placeholder { /* Chrome/Opera/Safari */\n//   @include u-input-placeholder;\n// }\n\n// ::-moz-placeholder { /* Firefox 19+ */\n//   @include u-input-placeholder;\n// }\n\n// :-ms-input-placeholder { /* IE 10+ */\n//   @include u-input-placeholder;\n// }\n\n// :-moz-placeholder { /* Firefox 18- */\n//   @include u-input-placeholder;\n// }\n\n\n\n\n\n\n\n\n/** ***********\n * Links\n */\na:not(img) {\n  color: initial;\n  text-decoration: none;\n}\n\n\n\n\n\n\n\n/** ***********\n * Figure reset\n */\nfigure {\n  margin: 0;\n}\n\nimg {\n  max-width: 100%;\n  height: auto;\n}\n\n\n\n\n\n\n\n\n\n/** ***********\n * Sticky footer\n */\n.global-wrapper {\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n  height: 100%;\n}\n\n\n.global-main {\n  flex: 1 0 auto;\n\n  &:after {\n    content: '\\00a0'; /* &nbsp; */\n    display: block;\n    height: 0;\n    visibility: hidden;\n  }\n}\n","//\n// SVG icons\n//\n\n/** ***********\n * DOM wrapper\n */\n.c-icon-defs {\n  height: 0;\n  width: 0;\n  overflow: hidden;\n}\n\n\n\n/** ***********\n * Component\n */\n.c-icon {\n  @include u-baseline(2, width);\n  @include u-baseline(2, height);\n  display: inline-block;\n  transform: translateY(-.1em);\n  vertical-align: middle;\n\n  &:not(.c-icon--nofill) {\n    fill: currentColor;\n  }\n\n  svg {\n    max-width: 100%;\n    max-height: 100%;\n  }\n}\n","//\n// Image with preview image\n//\n\n.c-image {\n  aspect-ratio: var(--image-ratio, 16 / 9);\n  background-color: var(--color-secondary);\n  overflow: hidden;\n  position: relative;\n  width: 100%;\n\n  img {\n    display: block;\n    max-width: 100%;\n    max-height: 100%;\n    // height: auto;\n    width: 100%;\n  }\n}\n\n\n\n/** ***********\n * Thumbnail\n */\n.c-image__thumb {\n  filter: blur(20px);\n  top: 0;\n  left: 0;\n  position: absolute;\n  z-index: 0;\n}\n\n\n\n/** ***********\n * Original image\n */\n.c-image__original {\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n","//\n// Back to top link\n//\n.m-backtotop {\n  @include u-baseline(2, right);\n  position: fixed;\n  bottom: -(rem-calc(60));\n  opacity: 0;\n  transition: all .5s var(--transition-default);\n  transform: rotate(-90deg);\n  z-index: index($elements, backtotop);\n\n  @include breakpoint(medium) {\n    @include u-baseline(3, right);\n  }\n\n  @include breakpoint(xlarge) {\n    @include u-baseline(4, right);\n  }\n\n  .c-icon {\n    width: 100%;\n    height: 100%;\n  }\n}\n\n\n\n\n\n\n\n\n\n/** ***********\n * Link\n */\n.m-backtotop__link {\n  @include u-baseline(1, padding);\n  @include u-baseline(5, width);\n  @include u-baseline(5, height);\n  background-color: var(--color-secondary);\n  color: var(--color-primary);\n  display: block;\n\n  &:hover {\n    color: var(--color-white);\n  }\n}\n\n\n\n\n\n\n\n\n/** ***********\n * Modifier: is active\n */\n.m-backtotop--active {\n  @include u-baseline(4, bottom);\n  opacity: 1;\n}\n","// Calc value to rem\n$rem-base: 16px;\n$baseline: 8 !default;\n\n@function strip-unit($num) {\n  @return $num / ($num * 0 + 1);\n}\n\n@function convert-to-rem($value, $base-value: $rem-base)  {\n  $value: strip-unit($value) / strip-unit($base-value) * 1rem;\n  @if ($value == 0rem) { $value: 0; } // Turn 0rem into 0\n  @return $value;\n}\n\n@function rem-calc($values, $base-value: $rem-base) {\n  $max: length($values);\n  @if $max == 1 { @return convert-to-rem(nth($values, 1), $base-value); }\n  $remValues: ();\n  @for $i from 1 through $max {\n    $remValues: append($remValues, convert-to-rem(nth($values, $i), $base-value));\n  }\n  @return $remValues;\n}\n\n@function rem-baseline($size: 1) {\n  $baseline: #{$baseline * ($size / 16)}rem;\n  @return $baseline;\n}\n"]}